[
  {
    "name": "_test_0.java",
    "path": "_test_0.java",
    "content": {
      "structured": {
        "description": "A `CorsConfig` class that configures CORS settings for a Spring Web MVC application. The class sets the allowed origins, methods, headers, and credentials for cross-origin resource sharing (CORS) using the `@Value` annotation to retrieve a property value from a configuration file. The `addCorsMappings()` method is overridden to add the CORS mappings to the registry.",
        "items": [
          {
            "id": "f07ddb3a-3a4d-9dbf-4045-75fc375251cc",
            "ancestors": [],
            "description": "Defines a Spring Boot configuration class that enables Cross-Origin Resource Sharing (CORS) for an application. The class provides a mapping of all URLs to allow origins, methods, headers, and credentials for CORS requests. The allowedOrigins field is set using the @Value annotation from a property file, while the corsConfigurer() method returns a WebMvcConfigurer instance that adds CORS mappings to the registry.",
            "name": "CorsConfig",
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 22,
            "docLength": null
          },
          {
            "id": "fd7a9fc0-62c0-239c-f247-bb960560b390",
            "ancestors": [
              "f07ddb3a-3a4d-9dbf-4045-75fc375251cc"
            ],
            "description": "Adds CORS mappings to enable cross-origin resource sharing for all URLs and allows requests from any origin, methods, headers, and credentials.",
            "params": [],
            "returns": {
              "type_name": "WebMvcConfigurer",
              "description": "a configuration for CORS (Cross-Origin Resource Sharing) that allows requests from any origin to access resources from the application.\n\n* `allowedOrigins`: An array of origins that are allowed to make requests to the server.\n* `allowedMethods`: An array of HTTP methods that are allowed to be used in requests from allowed origins.\n* `allowedHeaders`: An array of headers that are allowed to be used in responses from the server.\n* `exposedHeaders`: An array of headers that can be exposed in responses to client-side applications.\n* `allowCredentials`: A boolean value indicating whether credentials (e.g., authentication tokens) can be included in requests.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Configuration\npublic class AppConfig {\n\n  @Value(\"${server.cors.allowedOrigins}\")\n  private String[] allowedOrigins;\n  \n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}\n",
              "description": ""
            },
            "name": "corsConfigurer",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "4f0b0975-6d77-9993-c64f-2427f12cd588",
            "ancestors": [
              "f07ddb3a-3a4d-9dbf-4045-75fc375251cc",
              "fd7a9fc0-62c0-239c-f247-bb960560b390"
            ],
            "description": "Adds CORS mappings to a registry, specifying allowed origins, methods, headers, and credentials for all resources.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that can be modified with new mappings for cross-origin resource sharing (CORS) settings.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n}\n",
              "description": "\nIn this example, the method addCorsMappings is used to add a CORS mapping to the registry. The mapping is defined by its URL pattern, which matches any path (indicated by the use of the wildcard character \"/**\"). The allowed origins are set to the array of strings that contain the origins allowed by the server, as specified in the configuration file. The allowed methods are set to all HTTP methods supported by the server, indicated by the asterisk \"*\" character. The allowed headers are set to all headers supported by the server, again indicated by the asterisk \"*\" character. The exposed headers are set to the specific headers that should be exposed in CORS requests, which in this case include \"token\" and \"userId\". Finally, the allowCredentials property is set to true, indicating that the server allows credentials (e.g., cookies) to be transmitted in a cross-origin request."
            },
            "name": "addCorsMappings",
            "location": {
              "start": 17,
              "insert": 17,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          }
        ]
      }
    }
  }
]