[
  {
    "name": "_test_0.java",
    "path": "_test_0.java",
    "content": {
      "structured": {
        "description": "A CorsConfig class that configures CORS settings for a Spring Web MVC application. The configuration adds CORS mapping for all URLs, allows origins from a list of allowed origins, methods and headers, and enables credentials. The Bean annotation is used to create a WebMvcConfigurer instance that implements the addCorsMappings method.",
        "items": [
          {
            "id": "8d22365c-e076-96ba-ca4d-eea01928e9a7",
            "ancestors": [],
            "description": "Configures Cross-Origin Resource Sharing (CORS) settings for a Spring Web MVC application. It defines an array of allowed origins and allows all methods, headers, and credentials. The addCorsMappings method is overridden to apply these settings to all routes.",
            "name": "CorsConfig",
            "location": {
              "start": 9,
              "insert": 9,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 22,
            "docLength": null
          },
          {
            "id": "9b85c4e4-c9ca-6eb5-f140-8052717750a1",
            "ancestors": [
              "8d22365c-e076-96ba-ca4d-eea01928e9a7"
            ],
            "description": "Defines CORS (Cross-Origin Resource Sharing) mappings for a Spring Web MVC application, allowing requests from specified origins and methods, as well as specifying which headers to expose and whether credentials should be included in the allowed request types.",
            "params": [],
            "returns": {
              "type_name": "WebMvcConfigurer",
              "description": "a configuration for CORS (Cross-Origin Resource Sharing) that allows requests from any origin to access resources on the server.\n\n* `allowedOrigins`: an array of origins that are allowed to access the resources.\n* `allowedMethods`: an array of HTTP methods that are allowed to be used by the origins.\n* `allowedHeaders`: an array of headers that are allowed to be used by the origins.\n* `exposedHeaders`: an array of headers that are exposed to the origins.\n* `allowCredentials`: a boolean value indicating whether credentials (e.g., authentication tokens) should be included in the CORS response.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Configuration\npublic class MyAppConfig {\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n          .allowedOrigins(\"*\")\n          .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n          .allowedHeaders(\"Content-Type\", \"Authorization\")\n          .exposedHeaders(\"token\", \"userId\")\n          .allowCredentials(true);\n      }\n    };\n  }\n}\n",
              "description": ""
            },
            "name": "corsConfigurer",
            "location": {
              "start": 14,
              "insert": 14,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 16,
            "docLength": null
          },
          {
            "id": "128d3518-b896-fa9f-3a40-99d51392d0ab",
            "ancestors": [
              "8d22365c-e076-96ba-ca4d-eea01928e9a7",
              "9b85c4e4-c9ca-6eb5-f140-8052717750a1"
            ],
            "description": "Adds CORS mappings to a registry, allowing requests from any origin and specifying which methods, headers, and credentials are allowed.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that is being modified by adding mapping rules to allow cross-origin resource sharing (CORS) requests.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Autowired\nCorsConfig corsConfig;\n\n@Override\npublic void configure(WebSecurity web) throws Exception {\n    web.ignoring()\n        .antMatchers(\"/api/v1/**\");\n}\n\n@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    corsConfig.corsConfigurer().addCorsMappings(registry);\n}\n",
              "description": "\nThe method is used to configure the CORS settings for a web application by adding mappings to the CorsRegistry object. The method is called in the configuration of the WebSecurity class, and it uses the @Autowired annotation to inject an instance of the CorsConfig class into the method. The method then calls the addCorsMappings method on the corsConfigurer bean, passing in the registry object as an argument. This adds the CORS settings for the application to the registry object."
            },
            "name": "addCorsMappings",
            "location": {
              "start": 19,
              "insert": 19,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          }
        ]
      }
    }
  }
]