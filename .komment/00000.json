[
  {
    "name": "_test_0.java",
    "path": "_test_0.java",
    "content": {
      "structured": {
        "description": "A `CorsConfig` class that configures CORS (Cross-Origin Resource Sharing) settings for a Spring Web MVC application. The configuration sets allowed origins, methods, headers, and credentials for cross-origin resource sharing. The `WebMvcConfigurer` interface is implemented to add CORS mappings to the registry.",
        "items": [
          {
            "id": "5708ad94-d639-488e-6145-8bdf272aaf31",
            "ancestors": [],
            "type": "function",
            "description": "Is used to configure Cross-Origin Resource Sharing (CORS) settings for a Spring Web application. The class provides a method to add CORS mappings to the registry, allowing origins to access specific resources based on allowed Origins, Methods, Headers, and Exposed Headers. The allowCredentials() method is also set to true to enablecredentials authentication.",
            "name": "CorsConfig",
            "length": 22,
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "docLength": null
          },
          {
            "id": "eabcd1c3-44da-7abd-e24e-1beac4aee94d",
            "ancestors": [
              "5708ad94-d639-488e-6145-8bdf272aaf31"
            ],
            "type": "function",
            "description": "Defines CORS mappings for a web application, allowing requests from specified origins and methods, as well as providing specific headers and credentials.",
            "params": [],
            "returns": {
              "type_name": "WebMvcConfigurer",
              "description": "a configuration for enabling CORS (Cross-Origin Resource Sharing) on a web application, allowing requests from specified origins and specifying which headers can be accessed.\n\n* `allowedOrigins`: an array of allowed origins for CORS requests.\n* `allowedMethods`: an array of allowed HTTP methods for CORS requests.\n* `allowedHeaders`: an array of allowed headers for CORS requests.\n* `exposedHeaders`: an array of exposed headers for CORS requests.\n* `allowCredentials`: a boolean value indicating whether credentials should be included in CORS responses.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Configuration\npublic class MyConfig {\n  @Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(\"http://localhost:3000\", \"https://my-website.com\")\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n}\n",
              "description": "\nIn this example, the `corsConfigurer` method is annotated with `@Bean`, indicating that it returns a Spring MVC configuration bean. The method itself is annotated with `@Override`, which ensures that we are overriding the `addCorsMappings` method of the `WebMvcConfigurer` interface.\n\nThe `addCorsMappings` method takes in a `CorsRegistry` object as an argument, which is used to configure the CORS settings for our Spring MVC application. In this example, we are adding a mapping for all endpoints using the `addMapping(\"/**\")` method and allowing access from any origin by setting the `allowedOrigins` parameter to `\"*\"`. We are also specifying that any HTTP request method can be used by setting the `allowedMethods` parameter to `\"*\"`, and that any header can be sent by setting the `allowedHeaders` parameter to `\"*\"`.\n\nThe `exposedHeaders` parameter is used to specify which headers should be exposed in the response. In this example, we are exposing the `token` and `userId` headers. Finally, we set the `allowCredentials` parameter to `true`, indicating that our Spring MVC application can accept cookies from external domains.\n\nWith this configuration, any incoming HTTP request to our Spring MVC application will be allowed to access any endpoint, regardless of the origin of the request. The client can include any header it desires in its requests, and we will allow it to send cookies if necessary."
            },
            "name": "corsConfigurer",
            "length": 16,
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "docLength": null
          },
          {
            "id": "090bff53-303c-17bc-f14d-1439452ba54a",
            "ancestors": [
              "5708ad94-d639-488e-6145-8bdf272aaf31",
              "eabcd1c3-44da-7abd-e24e-1beac4aee94d"
            ],
            "type": "function",
            "description": "Adds CORS mappings to a registry, allowing requests from any origin, method, and header, as well as exposing specific headers and enabling credentials.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that the method adds mappings to.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Configuration\npublic class MyWebConfig implements WebMvcConfigurer {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(\"https://example.com\", \"http://localhost:8080\");\n            .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\");\n            .allowedHeaders(\"content-type\", \"x-auth-token\");\n            .exposedHeaders(\"token\", \"userId\");\n            .allowCredentials(true);\n    }\n}\n",
              "description": "\nThe above code adds a CORS configuration to the Spring Web MVC application. The method `addCorsMappings` is used to configure the CORS settings for all endpoints in the application. The `registry` parameter is an instance of the `CorsRegistry` class, which is used to define the CORS settings for each endpoint.\n\nIn this example, we are allowing requests from two origins: \"https://example.com\" and \"http://localhost:8080\". We are also specifying that only GET, POST, PUT, and DELETE methods are allowed. Additionally, we are allowing the headers \"content-type\" and \"x-auth-token\". The `exposedHeaders` method is used to expose the \"token\" and \"userId\" headers in the response. Finally, we are setting `allowCredentials` to true, which allows the client to include cookies in cross-origin requests."
            },
            "name": "addCorsMappings",
            "length": 9,
            "location": {
              "start": 18,
              "insert": 18,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "method",
            "docLength": null
          }
        ]
      }
    }
  }
]