[
  {
    "name": "_test_0.java",
    "path": "_test_0.java",
    "content": {
      "structured": {
        "description": "A configuration class named CorsConfig that enables Cross-Origin Resource Sharing (CORS) for a Spring web application. The class uses the @Configuration annotation and the @Value annotation to retrieve a list of allowed origins from an external property file. The class then creates a WebMvcConfigurer bean that adds CORS mappings to the registry, allowing requests from any origin to access any resource in the application. The configuration allows all methods, headers, and credentials, and specifies the \"token\" and \"userId\" headers as exposed.",
        "items": [
          {
            "id": "78e76745-0115-1597-5844-4b485eb1238c",
            "ancestors": [],
            "description": "Is a configuration class for managing Cross-Origin Resource Sharing (CORS) settings in a Spring Web MVC application. The class allows origins to access specific resources by specifying an array of allowed origins, and enables the use of certain HTTP methods, headers, and credentials.",
            "name": "CorsConfig",
            "location": {
              "start": 8,
              "insert": 8,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 20,
            "docLength": null
          },
          {
            "id": "a135eafd-1485-6990-d740-9714a1e24f6f",
            "ancestors": [
              "78e76745-0115-1597-5844-4b485eb1238c"
            ],
            "description": "Configures CORS (Cross-Origin Resource Sharing) settings for a web application, allowing requests from specified origins and methods, as well as specifying which headers to expose and whether credentials should be included in the response.",
            "params": [],
            "returns": {
              "type_name": "WebMvcConfigurer",
              "description": "a configuration for enabling Cross-Origin Resource Sharing (CORS) for all URLs.\n\n* `allowedOrigins`: an array of origin values that are allowed to make requests to the server.\n* `allowedMethods`: an array of HTTP methods that are allowed for making requests from the allowed origins.\n* `allowedHeaders`: an array of header names that are allowed to be sent in responses from the server.\n* `exposedHeaders`: an array of header names that should be exposed in the response.\n* `allowCredentials`: a boolean value indicating whether credentials (e.g., cookies, Authorization headers) should be included in the responses.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Bean\n  public WebMvcConfigurer corsConfigurer() {\n    return new WebMvcConfigurer() {\n      @Override\n      public void addCorsMappings(CorsRegistry registry) {\n        registry.addMapping(\"/**\")\n            .allowedOrigins(allowedOrigins)\n            .allowedMethods(\"*\")\n            .allowedHeaders(\"*\")\n            .exposedHeaders(\"token\", \"userId\")\n            .allowCredentials(true);\n      }\n    };\n  }\n",
              "description": "\nThis example shows the usage of a method to configure cross-origin resource sharing (CORS) in a Spring application. The `corsConfigurer` method returns an instance of the `WebMvcConfigurer` interface, which is used to add CORS mappings to the registry. The `addMapping` method is used to specify the URL pattern for which CORS should be enabled. In this case, it is set to `/**`, which matches any URL on the server. The `allowedOrigins` method is then called with an array of allowed origins, which are passed to the `CorsRegistry`. The `allowedMethods` method is used to specify the HTTP methods that should be allowed for the given origin. In this case, it is set to `*`, which allows any HTTP method. The `allowedHeaders` method is used to specify the headers that should be allowed for the given origin and method. In this case, it is set to `*`, which allows any header. The `exposedHeaders` method is used to specify the headers that should be exposed in the response. In this case, it is set to `\"token\", \"userId\"`, which exposes only the token and user ID headers. Finally, the `allowCredentials` method is used to enable cookies for the given origin and method."
            },
            "name": "corsConfigurer",
            "location": {
              "start": 13,
              "insert": 13,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "length": 14,
            "docLength": null
          },
          {
            "id": "bd9a7b2b-de58-74b5-fe4e-1bc3aa2cdcb4",
            "ancestors": [
              "78e76745-0115-1597-5844-4b485eb1238c",
              "a135eafd-1485-6990-d740-9714a1e24f6f"
            ],
            "description": "Adds CORS mappings to a registry, allowing requests from any origin, method, and headers, as well as enabling credentials.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "CorsRegistry object that contains the mapping configuration for Cross-Origin Resource Sharing (CORS) headers, methods, and origins.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "@Override\npublic void addCorsMappings(CorsRegistry registry) {\n    registry.addMapping(\"/**\")\n        .allowedOrigins(allowedOrigins)\n        .allowedMethods(\"*\")\n        .allowedHeaders(\"*\")\n        .exposedHeaders(\"token\", \"userId\")\n        .allowCredentials(true);\n}\n",
              "description": "\nIn this example, the method addCorsMappings is being used to configure CORS settings for a Spring Web application. The registry object passed as an argument is used to map URLs to CORS settings, and the method allows all origins (\"*\"), methods (\"*\"), headers (\"*\"), and credentials (true). It also exposes headers \"token\" and \"userId\"."
            },
            "name": "addCorsMappings",
            "location": {
              "start": 16,
              "insert": 16,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "method",
            "length": 9,
            "docLength": null
          }
        ]
      }
    }
  }
]