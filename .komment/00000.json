[
  {
    "name": "_test_0.java",
    "path": "_test_0.java",
    "content": {
      "structured": {
        "description": "A Spring Boot configuration class called `CorsConfig` that enables Cross-Origin Resource Sharing (CORS) for a web application. The class uses the `@Configuration` annotation and sets up CORS mappings for all routes (`\"/**\"`). It also defines an array of allowed origins (`allowedOrigins`) and specifies which HTTP methods, headers, and credentials are allowed for each origin. The `corsConfigurer()` method returns a `WebMvcConfigurer` object that adds the CORS mappings to the registry.",
        "items": [
          {
            "id": "d37de2c6-b7da-128d-0b47-a018704c5216",
            "ancestors": [],
            "type": "function",
            "description": "Defines configuration for enabling Cross-Origin Resource Sharing (CORS) in a Spring Web MVC application. The class has a single method, `corsConfigurer()`, which returns a WebMvcConfigurer object that adds CORS mappings to the registry. The CORS mappings allow origins listed in the `allowedOrigins` field to access resources with specific methods and headers. The `addCorsMappings()` method allows credentials to be passed along with the request.",
            "name": "CorsConfig",
            "length": 22,
            "location": {
              "start": 7,
              "insert": 7,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "docLength": null
          },
          {
            "id": "02342c17-b3f0-37aa-b44a-9d83c33be08b",
            "ancestors": [
              "d37de2c6-b7da-128d-0b47-a018704c5216"
            ],
            "type": "function",
            "description": "Configures CORS settings for a web application, allowing requests from any origin and specifying which methods, headers, and credentials are allowed.",
            "params": [],
            "returns": {
              "type_name": "WebMvcConfigurer",
              "description": "a configuration for enabling Cross-Origin Resource Sharing (CORS) for all routes.\n\n* `allowedOrigins`: An array of allowed origin values.\n* `allowedMethods`: An array of allowed HTTP methods (e.g., GET, POST, PUT, DELETE).\n* `allowedHeaders`: An array of allowed header fields.\n* `exposedHeaders`: An array of header fields that can be exposed to the client.\n* `allowCredentials`: A boolean indicating whether credentials (e.g., authentication tokens) are allowed to be included in the response.",
              "complex_type": true
            },
            "usage": {
              "language": "java",
              "code": "@Configuration\npublic class MyConfiguration {\n\n    @Bean\n    public WebMvcConfigurer corsConfigurer() {\n        return new WebMvcConfigurer() {\n            @Override\n            public void addCorsMappings(CorsRegistry registry) {\n                registry.addMapping(\"/**\")\n                        .allowedOrigins(\"https://example.com\", \"https://www.example.com\")\n                        .allowedMethods(\"GET\", \"POST\", \"PUT\", \"DELETE\")\n                        .allowedHeaders(\"Content-Type\", \"Accept\")\n                        .exposedHeaders(\"token\", \"userId\")\n                        .allowCredentials(true);\n            }\n        };\n    }\n}\n",
              "description": "\nThe example code adds a CORS mapping for any URL. The allowed origins are set to https://example.com and https://www.example.com, which allows requests from those URLs. The allowed methods are set to GET, POST, PUT, DELETE, which allow any HTTP method. The allowed headers are set to Content-Type and Accept, which allow any header with these names. The exposed headers are set to token and userId, which expose the headers with these names. Finally, the allowCredentials() method is called, allowing credentials to be sent in CORS requests."
            },
            "name": "corsConfigurer",
            "length": 16,
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "method",
            "docLength": null
          },
          {
            "id": "93fcf808-f39d-23bd-9c42-51b177c4d73a",
            "ancestors": [
              "d37de2c6-b7da-128d-0b47-a018704c5216",
              "02342c17-b3f0-37aa-b44a-9d83c33be08b"
            ],
            "type": "function",
            "description": "Adds CORS mappings to a registry, allowing requests from any origin and specifying allowed HTTP methods, headers, and credentials.",
            "params": [
              {
                "name": "registry",
                "type_name": "CorsRegistry",
                "description": "Cors registry that the method adds mappings to.",
                "complex_type": false
              }
            ],
            "usage": {
              "language": "java",
              "code": "public class MyConfiguration extends CorsConfig {\n    @Override\n    public void addCorsMappings(CorsRegistry registry) {\n        // this line will enable all allowed origins, methods, and headers for all mappings in the registry\n        registry.addMapping(\"/**\").allowedOrigins().allowedMethods().allowedHeaders();\n    }\n}\n",
              "description": ""
            },
            "name": "addCorsMappings",
            "length": 9,
            "location": {
              "start": 17,
              "insert": 17,
              "offset": " ",
              "indent": 6,
              "comment": null
            },
            "item_type": "method",
            "docLength": null
          }
        ]
      }
    }
  }
]